GPP_dataset <- read.csv("C:/Users/Marc/Downloads/GPP_dataset.csv", sep=";")
View(GPP_dataset)
library(xts)
install.packages("xts")
library(xts)
GPP_dataset<-xts(GPP_dataset[,2:9],as.Date(GPP_dataset$Date))
plot(GPP_dataset$GPP_obs)
plot(GPP_dataset[,1:2])
plot(GPP_dataset["2003-01-01/2005-01-01",1:2])
plot(GPP_dataset["2003-01-01/2006-01-01",1:2])
plot(GPP_dataset["2002-01-01/2006-01-01",1:2])
GPP_subset<-GPP_dataset["2002-01-01/2006-01-01",]
plot(GPP_subset)
write.table(GPP_dataset,"GPP_subset.csv",sep=";",col.names=T,row.names=T)
getwd()
write.table(GPP_subset,"GPP_subset.csv",sep=";",col.names=T,row.names=T)
GPP_subset1<-as.data.frame(GPP_subset)
GPP_subset1<-cbind(Date=index(GPP_subset),GPP_subset1)
View(GPP_subset1)
write.table(GPP_subset1,"GPP_subset.csv",sep=";",col.names=T,row.names=F)
rm(list=ls())
GPP_subset <- read.csv("~/GPP_subset.csv", sep=";")
View(GPP_subset)
GPP_subset<-xts(GPP_subset[,2:9],as.Date(GPP_subset[,1]))
plot(GPP_subset[,1:2])
install.packages("dplyr")
install.packages(c("ggplot2", "tidyr"))
install.packages(c("raster", "RNetCDF"))
install.packages("sen2r")
library(sen2r)
sen2r()
install.packages("Rtools")
install.packages("installr")
library(installr)
updateR()
library(sen2r)
sen2r()
install.packages("leaflet", "leafpm", "mapedit", "shiny", "shinyFiles", "shinydashboard", "shinyjs", "shinyWidgets")
install.packages("leaflet", "leafpm", "mapedit", "shiny", "shinyFiles", "shinydashboard", "shinyjs", "shinyWidgets")
install.packages("RgoogleMaps")
library(RgoogleMaps)
APIk="AIzaSyC8mHpOaQy3QYttigxQc_tzUNbEEld49Fs"
library(RgoogleMaps)
?GetMap
cent=c(48.812537, 2.248522)
t.map<-GetMap(center=cent, zoom = 15, maptype = "satellite",API_console_key=APIk)
APIk="&key=AIzaSyC8mHpOaQy3QYttigxQc_tzUNbEEld49Fs"
t.map<-GetMap(center=cent, zoom = 15, maptype = "satellite",API_console_key=APIk)
t.map<-GetBingMap(center=cent, zoom = 15, maptype = "Aerial")
APIk="AIzaSyC8mHpOaQy3QYttigxQc_tzUNbEEld49Fs"
t.map<-GetMap(center=cent, zoom = 15, maptype = "satellite")
plot(t.map)
t.map
t.map<-GetMap(center=cent, zoom = 15, maptype = "satellite",RETURNIMAGE = TRUE)
t.map
plot(t.map)
library(raster)
plot(t.map)
plotmap(t.map)
plotmap(map = t.map)
PlotOnStaticMap(t.map, add=F, TrueProj=FALSE)
t.map<-GetMap(center=cent, zoom = 15, maptype = "satellite")
PlotOnStaticMap(t.map, add=T, TrueProj=T)
t.map<-GetMap(center=cent, zoom = 15, maptype = "satellite")
PlotOnStaticMap(t.map)
plotmap("Brandenburg Gate, Berlin", zoom = 16, maptype="satellite")
plotmap("Brandenburg Gate, Berlin", zoom = 16, maptype="hybrid")
library(rgdal)
plotmap("Brandenburg Gate, Berlin", zoom = 16, maptype="satellite")
install.packages("ggmap")
library(ggmap)
rregister_google(APIk)
register_google(APIk)
cent=c(2.248522,48.812537)
t.map<-get_map(center=cent, zoom = 15, maptype = "satellite",source="google")
?get_map
cent=c(lon=2.248522,lat=48.812537)
t.map<-get_map(center=cent, zoom = 15, maptype = "satellite",source="google")
t.map<-get_map(center=cent)
t.map<-get_map(location =cent, zoom = 15, maptype = "satellite",source="google")
t.map<-get_map(location =cent
)
?register_google
ggmap_show_api_key()
showing_key()
register_google(key=APIk)
geocode("waco, texas", urlonly = TRUE)
map <- get_map(c(-97.14667, 31.5493)))
str(map)
ggmap(map)
map <- get_map(c(-97.14667, 31.5493))
str(map)
ggmap(map)
devtools::install_github("dkahle/ggmap"
)
install.packages("devtools")
library(devtools)
devtools::install_github("dkahle/ggmap"
)
library(devtools)
devtools::install_github("dkahle/ggmap"
)
library(ggmap)
t.map<-get_map(location =cent, zoom = 15, maptype = "satellite",source="google")
cent=c(lon=2.248522,lat=48.812537)
t.map<-get_map(location =cent, zoom = 15, maptype = "satellite",source="google")
APIk="AIzaSyC8mHpOaQy3QYttigxQc_tzUNbEEld49Fs"
register_google(key=APIk)
t.map<-get_map(location =cent, zoom = 15, maptype = "satellite",source="google")
t.map<-get_map(location =cent, zoom = 15, maptype = "satellite",source="osm")
map <- get_map(location = "texas", zoom = 6, source = "stamen")
library(ggmap)
cent=c(lon=2.248522,lat=48.812537)
t.map<-get_map(location =cent, zoom = 15, maptype = "satellite",source="osm")
t.map<-get_map(location =cent, zoom = 15,source="osm")
t.map<-get_map(location =cent, zoom = 15,source="stamen")
osm <- get_openstreetmap()
library(RgoogleMaps)
?GetBingMap
#library(ggmap)
#gAPIk="AIzaSyC8mHpOaQy3QYttigxQc_tzUNbEEld49Fs"
biengAPI="bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
#register_google(key=APIk)
cent=c(lon=2.248522,lat=48.812537)
#register_google(key=APIk)
cent=c(48.812537,2.248522)
t.map<-GetBingMap(center=cent, zoom = 15,apiKey = biengAPI)
map1=GetBingMap(center=c(47.619048,-122.35384),zoom=15,apiKey=apiKey,
verbose=1, destfile="Seattle.png")
map1=GetBingMap(center=c(47.619048,-122.35384),zoom=15,apiKey=biengAPI,
verbose=1, destfile="Seattle.png")
map1=GetBingMap(center=c(47.619048,-122.35384),zoom=15,
verbose=1, destfile="Seattle.png")
#library(ggmap)
#gAPIk="AIzaSyC8mHpOaQy3QYttigxQc_tzUNbEEld49Fs"
biengAPI="AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
t.map<-GetBingMap(center=cent, zoom = 15,apiKey = biengAPI)
t.map<-GetBingMap(center=cent, zoom = 15,apiKey = biengAPI, maptype="Aerial")
PlotOnStaticMap(t.map)
t.map<-GetBingMap(center=cent, zoom = 1,apiKey = biengAPI, maptype="Aerial")
PlotOnStaticMap(t.map)
t.map<-GetBingMap(center=cent, zoom = 24,apiKey = biengAPI, maptype="Aerial")
t.map<-GetBingMap(center=cent, zoom = 20,apiKey = biengAPI, maptype="Aerial")
PlotOnStaticMap(t.map)
t.map<-GetBingMap(center=cent, zoom = 18,apiKey = biengAPI, maptype="Aerial")
PlotOnStaticMap(t.map)
t.map
url="http://dev.virtualearth.net/REST/v1/Imagery/Map/Road/48.812537,2.248522/15?mapSize=640,640&format=png&key=AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
destfile="test.png"
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- ReadMapTile(destfile)
myTile <- readPNG(destfile, native=FALSE);
tt<-download.file(url, destfile, mode="wb", quiet = TRUE)
map1=GetBingMap(center=c(47.619048,-122.35384),zoom=15,apiKey=apiKey,
verbose=1, destfile="Seattle.png")
map1=GetBingMap(center=c(47.619048,-122.35384),zoom=15,apiKey=biengAPI,
verbose=1, destfile="Seattle.png")
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = 15, SCALE = 1);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
size=c(640,640)
MetaInfo <- list(lat.center = center[1], lon.center  = center[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
zoom=15
SCALE=1
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
myMap <- ReadMapTile(destfile)
PlotOnStaticMap(my)
PlotOnStaticMap(myMap)
url="http://dev.virtualearth.net/REST/v1/Imagery/Map/Aerial/48.812537,2.248522/15?mapSize=640,640&format=png&key=AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
destfile="test.png"
zoom=15
SCALE=1
size=c(640,640)
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom, SCALE = SCALE);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- ReadMapTile(destfile)
url="https://dev.virtualearth.net/REST/v1/Imagery/Map/AerialWithLabels/eiffel%20tower?mapSize=500,400&key=AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
destfile="test.png"
zoom=15
SCALE=1
size=c(500,400)
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom, SCALE = SCALE);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- ReadMapTile(destfile)
destfile="test.jpg"
zoom=15
SCALE=1
size=c(500,400)
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom, SCALE = SCALE);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- ReadMapTile(destfile)
t.map<-GetBingMap(center=cent, zoom = 18,apiKey = biengAPI,maptype = "Aerial",format = "jpg")
url="http://dev.virtualearth.net/REST/v1/Imagery/Map/Aerial/48.812537,2.248522/15?mapSize=640,640&format=png&key=AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
destfile="test.jpg"
zoom=15
SCALE=1
size=c(640,640)
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom, SCALE = SCALE);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- Read(destfile)
myMap <- ReadMapTile(destfile)
plot(myMap)
PlotOnStaticMap(myMap)
myMap
?PlotOnStaticMap
url="http://dev.virtualearth.net/REST/v1/Imagery/Map/Aerial/48.812537,2.248522/18?mapSize=1200,1200&format=png&key=AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
destfile="test.jpg"
zoom=15
zoom=18
SCALE=1
size=c(1200,1200)
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom, SCALE = SCALE);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- ReadMapTile(destfile)
PlotOnStaticMap(myMap)
url="http://dev.virtualearth.net/REST/v1/Imagery/Map/Aerial/48.812537,2.248522/20?mapSize=1200,1200&format=png&key=AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
destfile="test.jpg"
destfile="test.png"
zoom=20
SCALE=1
size=c(1200,1200)
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom, SCALE = SCALE);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- ReadMapTile(destfile)
PlotOnStaticMap(myMap)
url="http://dev.virtualearth.net/REST/v1/Imagery/Map/Aerial/48.812537,2.248522/19?mapSize=1200,1200&format=png&key=AvKBhix-bEwNHdQFl7gPs9yJtXufOzVzjM6KI2aj_dqKiDvbbyuLI7R-RkBp9qZs"
destfile="test.png"
zoom=19
SCALE=1
size=c(1200,1200)
MyMap <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom, SCALE = SCALE);
BBOX <- list(ll = XY2LatLon(MyMap, -size[1]/2 + 0.5, -size[2]/2 - 0.5), ur = XY2LatLon(MyMap, size[1]/2 + 0.5, size[2]/2 - 0.5) );
MetaInfo <- list(lat.center = cent[1], lon.center  = cent[2], zoom = zoom,
url = "bing", BBOX = BBOX, size=size, SCALE = SCALE);
save(MetaInfo, file = paste(destfile,"rda",sep="."));
download.file(url, destfile, mode="wb", quiet = TRUE)
myMap <- ReadMapTile(destfile)
PlotOnStaticMap(myMap)
packageVersion('rgdal')
c('SQLite', 'OSM') %in% ogrDrivers()$name
ogrDrivers()
ogrListLayers
library(rgdal)
c('SQLite', 'OSM') %in% ogrDrivers()$name
library(raster)
test<-raster("S2GLC_Europe_2017_v1.2_RGB/S2GLC_Europe_2017_RGB_v1.2.tif")
yrdy
test
class(test)
plot(test[[1]])
plot(test[[1]],xlim=c(3500000,4000000),ylim=c(2800000,3000000))
test2<-projectRaster(test,crs = "+proj=longlat +datum=WGS84")
setwd("e:/")
setwd("Science_projects/FoliArduino/Foliarduino_git/FoliArduino/Data/")
fic<-list.files(pattern = ".TXT")
all_data<-NULL
for ( i in fic ){
tmp<-read.table(file = i, sep=";", header = TRUE)
year<-rep(as.numeric(substr(i,start = 1,stop=4)),4)
month<-rep(as.numeric(substr(i,start = 5,stop=6)),4)
day<-rep(as.numeric(substr(i,start = 7,stop=8)),4)
hour<-rep(as.numeric(substr(i,start = 10,stop=11)),4)
min<-rep(as.numeric(substr(i,start = 12,stop=13)),4)
sec<-rep(as.numeric(substr(i,start = 14,stop=15)),4)
idate<-strptime(substr(i,start=1,stop=15),format="%Y%m%d_%H%M%S") # convert file name to date
tmp<-cbind(file=rep(i,4),year,month,day,hour,min,sec,tmp)
all_data<-rbind(all_data,tmp)
}
View(all_data)
# Step 2 - we compute cold junction temperature from thermistance
Cold_Vo<-all_data$Cold_T # encoded on 1024 bits
# resistor used in serie with the thermistor
R1 = 10000 #ohm
# The arduino encode analogread on 1024 bits (from 0 to 1023)
# it means that 1 bit corresponds to a sensitivity of 5V / 1024 = 0.00488 V
# Computes thermistor value
# Vout = Vin * (R2/(R1+R2)) with Vin = 5V from the arduino
R2 = R1 * (1023.0 / Cold_Vo - 1.0)
# Approach 1: Steinhart-Hart equation: 1/T = A + Bln(R) + C(ln(R))3
# coefficients can be estimated by fitting 3 measurements.
c1 = 1.009249522e-03
c2 = 2.378405444e-04
c3 = 2.019202697e-07
Tk = (1.0 / (c1 + c2*log(R2) + c3*log(R2)*log(R2)*log(R2)))
Tcj = Tk - 273.15 # Cold temperature in Â°C
Tcj
all_data$MAX_T
# Step 3 - We convert Cold_Tc into voltage at the cold junction
# lots of information here: http://www.mosaic-industries.com/embedded-systems/microcontroller-projects/temperature-measurement/thermocouple/cold-junction-compensation
# information on converting temperature to voltage here: http://www.mosaic-industries.com/embedded-systems/microcontroller-projects/temperature-measurement/thermocouple/calibration-table#computing-cold-junction-voltages
# The following table is of calibration coefficients for Type T thermocouple wires.
# In our case we are only interested in temperatures between -20 and 70°C corresponding to a range of -0.757 to 2.909 mV
To<- 2.5000000E+01
Vo<-	9.9198279E-01
p1<-	4.0716564E-02
p2<-	7.1170297E-04
p3<-	6.8782631E-07
p4<-	4.3295061E-11
q1<-	1.6458102E-02
q2<-	0.0000000E+00
Tdif=Tcj-To
num<-Tdif*(p1+Tdif*(p2+Tdif*(p3+p4*Tdif)))
denom<-1+Tdif*(q1+q2*Tdif)
denom[denom==0]<-0.00000000000001 # avoid division 0
Vcj = Vo + num/denom
Vcj
all_data$Hot_T<-all_data$Hot_T/1000 ###### convert from µV to mV
all_data$Hot_T
Vtc<- all_data$Hot_T + Vcj
Vtc
Vbreaks<-c(-4.648,0,9.288)
To<-c(	-1.9243000E+02,	-6.0000000E+01,	1.3500000E+02,	3.0000000E+02)
Vo<-c(	-5.4798963E+00,	-2.1528350E+00,	5.9588600E+00,	1.4861780E+01)
p1<-c(	5.9572141E+01,	3.0449332E+01,	2.0325591E+01,	1.7214707E+01)
p2<-c(	1.9675733E+00,	-1.2946560E+00,	3.3013079E+00,	-9.3862713E-01)
p3<-c(	-7.8176011E+01,	-3.0500735E+00,	1.2638462E-01,	-7.3509066E-02)
p4<-c(	-1.0963280E+01,	-1.9226856E-01,	-8.2883695E-04,	2.9576140E-04)
q1<-c(	2.7498092E-01,	6.9877863E-03,	1.7595577E-01,	-4.8095795E-02)
q2<-c(	-1.3768944E+00,	-1.0596207E-01,	7.9740521E-03,	-4.7352054E-03)
q3<-c(	-4.5209805E-01,	-1.0774995E-02,	0.0,	0.0)
index<-NULL
index[Vtc<Vbreaks[1]]<-1
index[(Vtc>Vbreaks[1])&(Vtc<Vbreaks[2])]<-2
index[(Vtc>Vbreaks[2])&(Vtc<Vbreaks[3])]<-3
index[Vtc>Vbreaks[3]]<-4
Vdif<-Vtc-Vo[index]
num<-Vdif*(p1[index]+Vdif*(p2[index]+Vdif*(p3[index]+p4[index]*Vdif)))
denom<-1+Vdif*(q1[index]+Vdif*(q2[index]+q3[index]*Vdif))
denom[denom==0]<-0.00000000000001 # avoid division 0
Thj<-To[index] + num/denom
Thj
